generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  hashedPassword String
  isLocked Boolean @default(false)
  LockedUntil DateTime @default(now())
  passwordRetryCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  devices Device[]
  student Student[]
  user    User[]
  roles Roles[]
}

model User{
  id  String @id @default(uuid())
  name String
  email String @unique
  hashedPassword String
  isLocked Boolean @default(false)
  LockedUntil DateTime @default(now())
  passwordRetryCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   String
  admin Admin @relation(fields: [adminId], references: [id])
  roleId String
  roles Roles @relation(fields: [roleId], references: [id])
}

model Device {
  deviceId     String    @id @default(uuid())
  name         String
  macAddress   String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminId       String
  admin         Admin @relation(fields: [adminId], references: [id])
  studentId    String?    @unique
  student      Student? 
}

model Student {
  generatedId         Int               @default(0) @unique
  studentId           String            @id @default(uuid())
  name                String
  facilityId          String            @unique
  imageUrl            String?
  TotalTime           Int               @default(0)
  completedCourses    Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  adminId             String
  admin               Admin @relation(fields: [adminId], references: [id])
  signInOUT           SignInOut[]
  deviceId            String?           @unique
  connectedDevice     Device?          @relation(fields: [deviceId], references: [deviceId]) 
  studentExpriment    StudentExpriment[]
  studentCategories   StudentCategories[]
}

model SignInOut {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [studentId])
  signIn DateTime @default(now())
  signOut DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories{
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentCategories StudentCategories[]
}
model Expriments {
  ExprimentId String @id @default(uuid())
  name String
  chatperNumber Int
  studentExpriment StudentExpriment[]
}
model StudentExpriment {
  id String @id @default(uuid())
  studentId String
  exprimentId String
  progress Float @default(0.0)
  practicalTestGrade Float @default(0.0)
  theoreticalTestGrade Float @default(0.0)
  student Student @relation(fields: [studentId], references: [studentId])
  expriment Expriments @relation(fields: [exprimentId], references: [ExprimentId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentCategories {
  id String @id @default(uuid())
  studentId String
  categoryId String
  classNumber Int
  student Student @relation(fields: [studentId], references: [studentId])
  categories Categories @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id String @id @default(uuid())
  name String
  isDevicesAccess Boolean @default(false)
  isStudentsAccess Boolean @default(false)
  isReportsAccess Boolean @default(false)
  isLogsAccess Boolean @default(false)
  isRolesAccess Boolean @default(false)
  isUsersAccess Boolean @default(false)
  adminId String
  admin Admin @relation(fields: [adminId], references: [id])
  users User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@unique([name, adminId])
}