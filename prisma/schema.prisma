generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  String @id @default(uuid())
  name String
  email String @unique
  hashedPassword String
  role String
  isLocked Boolean @default(false)
  LockedUntil DateTime
  passwordRetryCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  devices Device[]
  student Student[]
}

model Device{
  deviceId String @id @default(uuid())
  name String
  macAddress String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  student Student[]
}

model Student {
  studentId String @id @default(uuid())
  name String
  facilityId String
  role String
  imageUrl String
  TotalTime Int @default(0)
  completedCourses Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  signInOUT SignInOut[]
  deviceID String
  connectedDevice Device @relation(fields: [deviceID], references: [deviceId])
  studentExpriment StudentExpriment[]
  studentCategories StudentCategories[]
}

model SignInOut {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [studentId])
  signIn DateTime @default(now())
  signOut DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories{
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentCategories StudentCategories[]
}

model Expriments {
  ExprimentId String @id @default(uuid())
  name String
  chatperNumber Int
  studentExpriment StudentExpriment[]
}
model StudentExpriment {
  id String @id @default(uuid())
  studentId String
  exprimentId String
  progress Float
  practicalTestGrade Float
  theoreticalTestGrade Float
  student Student @relation(fields: [studentId], references: [studentId])
  expriment Expriments @relation(fields: [exprimentId], references: [ExprimentId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentCategories {
  id String @id @default(uuid())
  studentId String
  categoryId String
  student Student @relation(fields: [studentId], references: [studentId])
  categories Categories @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}