generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}


datasource db {
  provider = "postgresql"
  url               = env("DIRECT_URL")
  directUrl         = env("DIRECT_URL")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  hashedPassword String
  isLocked Boolean @default(false)
  LockedUntil DateTime @default(now())
  passwordRetryCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  devices Device[]
  student Student[]
  user    User[]
  roles Roles[]
  token String?
  Team Teams[]
  closeApp CloseApp[]
  logs Logs[]
  school School[]
}

model User{
  id  String @id @default(uuid())
  name String
  email String @unique
  imageUrl String? 
  hashedPassword String
  isLocked Boolean @default(false)
  LockedUntil DateTime @default(now())
  passwordRetryCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   String
  admin Admin @relation(fields: [adminId], references: [id])
  roleId String
  roles Roles @relation(fields: [roleId], references: [id])
  logs Logs[]
  token String?
}

model Device {
  deviceId     String    @id @default(uuid())
  name         String
  macAddress   String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminId       String
  admin         Admin @relation(fields: [adminId], references: [id])
  studentId    String?    @unique
  student      Student? 
}


model Roles {
  id String @id @default(uuid())
  name String
  isDevicesAccess Boolean @default(false)
  isStudentsAccess Boolean @default(false)
  isReportsAccess Boolean @default(false)
  isLogsAccess Boolean @default(false)
  isRolesAccess Boolean @default(false)
  isUsersAccess Boolean @default(false)
  isCoursesAccsess Boolean @default(false)
  isCertificatesAccess Boolean @default(false)
  isDashboardAccess Boolean @default(false)
  isLibraryAccess Boolean @default(false)
  adminId String
  admin Admin @relation(fields: [adminId], references: [id])
  users User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Teams{
  teamId String @id @default(uuid())
  name String
  classes Classes[]
  courses Courses[]
  student Student[]
  adminId String
  schoolId String
  school School @relation(fields: [schoolId], references: [schoolId])
  admin Admin @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classes{
  classId String @id @default(uuid())
  number String
  teamId String
  team Teams @relation(fields: [teamId], references: [teamId])
  courses Courses[]
  student Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses{
  courseId String @id @default(uuid())
  name String
  classId String
  class Classes @relation(fields: [classId], references: [classId])
  teamId String
  team Teams @relation(fields: [teamId], references: [teamId])
  chatpers Chatpers[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  generatedId         String             
  studentId           String            @id @default(uuid())
  name                String
  facilityId          String            
  imageUrl            String?
  TotalTime           Int               @default(0)
  completedCourses    Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  adminId             String
  admin               Admin @relation(fields: [adminId], references: [id])
  deviceId            String?           @unique
  teamId              String
  team                Teams @relation(fields: [teamId], references: [teamId])
  classId             String
  class               Classes @relation(fields: [classId], references: [classId])
  connectedDevice     Device?          @relation(fields: [deviceId], references: [deviceId]) 
  studentExpriment    StudentExpriment[]
  certificates        certificates[]
  closeApp            CloseApp[]
  classalpha          String @default("A")      
  schoolName          String @default(" مدرسه النور ")

  @@unique([adminId, facilityId, generatedId])
}

model Chatpers{
  chapterId String @id @default(uuid())
  name String
  courseId String
  course Courses @relation(fields: [courseId], references: [courseId])
  expriment Expriments[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expriments {
  exprimentId String @id @default(uuid())
  name String
  chapterId String
  chapter Chatpers @relation(fields: [chapterId], references: [chapterId])
  studentExpriment StudentExpriment[]
}


model StudentExpriment {
  id String @id @default(uuid())
  studentId String
  exprimentId String
  progress Float @default(0.0)
  practicalTestGrade Float @default(0.0)
  theoreticalTestGrade Float @default(0.0)
  enterTraining Int @default(0)
  enterTheortical Int @default(0)
  enterPratical Int @default(0)
  student Student @relation(fields: [studentId], references: [studentId])
  expriment Expriments @relation(fields: [exprimentId], references: [exprimentId])
  totalTrainingTime Int @default(0)
  totalTheorticalTime Int @default(0)
  totalPraticalTime Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model certificates {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [studentId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CloseApp {
  closeAppId String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [studentId])
  adminId String
  admin Admin @relation(fields: [adminId], references: [id])
  reason String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Logs {
  logId String @id @default(uuid())
  userId String?
  user User? @relation(fields: [userId], references: [id])
  adminId String
  admin Admin @relation(fields: [adminId], references: [id])
  action String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  schoolId String @id @default(uuid())
  name String
  teams Teams[]
  adminId String
  admin Admin @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}